generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:123@localhost:5432/mydatabase?schema=public"
}


model Lead {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  objective String
  routine   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  user User?

  @@map("leads")
}


model User {
  id                 Int       @id @default(autoincrement())
  leadId             Int       @unique // Relação com o lead original
  stripeCustomerId   String?   @unique // ID do cliente no Stripe
  subscriptionStatus String    @default("inactive") // active, inactive, canceled
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  
  subscriptions Subscription[]

  
  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("users")
}


model Subscription {
  id               Int      @id @default(autoincrement())
  stripeSubscriptionId String? @unique 
  status           String   @default("incomplete") 
  currentPeriodEnd DateTime? 
  priceId          String?   
  userId           Int      

  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Campaign {
  id        Int       @id @default(autoincrement())
  name      String
  status    String    @default("pending") // pending, active, finished, canceled
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  messages  CampaignMessage[]
}

model CampaignMessage {
  id         Int      @id @default(autoincrement())
  name       String
  phone      String
  message    String
  sendAt     DateTime
  status     String   @default("pending") // pending, sent, failed
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}
model SystemUser {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  role         String   @default("trainer") // trainer, admin, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("system_users")
}